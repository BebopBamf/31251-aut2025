#+property: header-args :flags -Wall -Wextra -std=c++20
#+reveal_init_options: slideNumber:false
#+title: 31251 Data Structures and Algorithms Tutorial
#+author: Euan Mendoza
#+email: euan.j.mendoza@effectfree.dev
#+date: Week 01
* Welcome to Week 1 of Data Structures and Algorithms
* Introduction to Your Tutor

I am Euan Mendoza.

 * PhD Candidate in theoretical computer science.
 * Overall nice chill guy.

* In Class Activity
Sort yourself by name.

* Subject Admin Things
** How to ask questions
*** Ask on Ed
*** Ask in Person
*** Ask by Email

** Assessments Overview
1. Weekly Quizzes, theory and practical component (20%)
2. Programming Assignment 1 (20%)
3. Programming Assignment 2 (30%)
4. Final Exam (Take Home Style) (30%)

* What to Expect
** What DSA is About
What makes a algorithm? What makes a data structure, why is it important.

** Theoretical vs Practical

** The Real World
 * Sketching and streaming algorithms.
 * Low level programming.

** How labs are run
** In this lab

* Editing C++
** The Ed Environment
** Recommended Compilers
** Recommended Text Editors
** Recommended Extras

* First C++ Program
Here is the classic /Hello World!/ program in C++.

#+begin_src C++ :main no :tangle 01_hello_world/hello_world.cpp :mkdirp yes
// We include the iostream library.
// This library contains the declaration of
// the cout object.
#include <iostream>

int main() {
    // Standard library objects are put in a "namespace" called std.
    // This is to avoid name collisions with names we define.
    // To refer to objects in the std namespace we use the scope resolution
    // operator ::, as in std::cout
    std::cout << "Hello World\n";
    return 0;
}
#+end_src

#+RESULTS:
: Hello World

* Reading Input
** Reading a string
We can use the src_C++[:exports code]{std::cin} to read inputs.

#+begin_src C++ :main no :tangle 02_read_input/read_input.cpp :mkdirp yes
#include <iostream>
// this time we will also use the string library
#include <string>

int main() {
    // We initialise an empty string userInput
    // The string class is provided by the standard
    // library and is in the std namespace so we
    // again access it with std:: using the
    // scope resolution operator
    std::string userInput{};
    // use cin to read keyboard input into userInput
    /***
    your code here
    ***/
    // Now check it by printing out userInput
    return 0;
}
#+end_src

#+RESULTS:

**  Reading integers
Can we add two inputs?

#+begin_src C++ :main no :tangle 03_add_input/add.cpp :mkdirp yes
#include <iostream>

// Write a function with two ints as
// parameters that returns their sum

int main() {
    // Prompt the user to enter an integer.
    // Prompt the user to enter another integer.
    // Use your add function to sum the integers.
    // Print out the result!
    return 0;
}
#+end_src

* Functions and Testing
Let's make a factorial function.

Recall that the factorial function $n!$ is defined as follows.

\begin{align*}
0! &= 1 \\
1! &= 1 \\
n! &= n\cdot (n-1)!
\end{align*}

We need to build a function,

#+begin_src C++ :main no :tangle 04_factorial/factorial.hpp :mkdirp yes
// header file
#ifndef FACTORIAL_HPP
#define FACTORIAL_HPP

// declaration of the factorial function
// this gives the signature of the function
// you do not need to do anything here

int factorial(int);

#endif  // FACTORIAL_HPP
#+end_src

#+RESULTS:

We can write in this file.

#+begin_src C++ :main no :tangle 04_factorial/factorial.cpp :mkdirp yes
#include "factorial.hpp"

// definition of the factorial function
// fill this in to correctly return the
// factorial of the input and pass the test cases

int factorial(int n) {
  return -1;
}
#+end_src

** Aside: Testing, Makefiles and Buildsystems

#+begin_src C++ :main no :tangle 04_factorial/tests.cpp :mkdirp yes
#include <gtest/gtest.h>
#include "factorial.hpp"

TEST(factorialTest, tautology) {
  EXPECT_EQ(factorial(3), 6);
}
#+end_src

#+RESULTS:
#+begin_src C++ :main no :tangle 04_factorial/main.cpp :mkdirp yes
// We will use the googletest library to
// write test cases to check your code.
// The next line includes this library
#include <gtest/gtest.h>
// in order to use the factorial function
// we need to include the header file with
// its declaration.  Local files are included
// using double quotes instead of the angle brackets.
#include "factorial.hpp"

// The syntax for googletest is pretty easy.
// TEST has two parameters: the first is the
// name of the test "family".  We can group
// tests together that test similar things.
// Here we put all tests into the same family.
// The second is the name of the individual test.
// It should be descriptive of what is being tested.
// Each test needs a unique individual name.

// We include all the tests that will be checked
// when you press "Mark".
TEST(factorialTest, factorialOf0is1) {
  EXPECT_EQ(factorial(0), 1);
}

TEST(factorialTest, factorialOf1is1) {
  EXPECT_EQ(factorial(1), 1);
}

TEST(factorialTest, factorialOf2is2) {
  EXPECT_EQ(factorial(2), 2);
}

TEST(factorialTest, factorialOf3is6) {
  EXPECT_EQ(factorial(3), 6);
}

TEST(factorialTest, factorialOf4is24) {
  EXPECT_EQ(factorial(4), 24);
}

TEST(factorialTest, factorialOf5is120) {
  EXPECT_EQ(factorial(5), 120);
}

TEST(factorialTest, factorialOf6is720) {
  EXPECT_EQ(factorial(6), 720);
}

TEST(factorialTest, factorialOf7is5040) {
  EXPECT_EQ(factorial(7), 5040);
}

// Try to add your own test here!

int main(int argc, char* argv[]) {
    // the next line is necessary to initialise googletest
    ::testing::InitGoogleTest(&argc, argv);

    /***
    you can add things to main if you want
    ***/

    // the next line runs all the tests given above.
    // you can comment this line out if you don't want
    // to do something else and not run the tests
    return RUN_ALL_TESTS();
}
#+end_src

We can use the following file to build the project.

#+begin_src make :tangle 04_factorial/Makefile :mkdirp yes
CFLAGS = -std=c++20 -Wall -Wextra -g

.PHONY: clean

all: factorial tests

tests: tests.cpp factorial.o
	clang++ $(CFLAGS) -isystem /opt/homebrew/include -L/opt/homebrew/lib -lgtest -lgtest_main $^ -o $@

factorial: main.cpp factorial.o
	clang++ $(CFLAGS) -isystem /opt/homebrew/include -L/opt/homebrew/lib -lgtest $^ -o $@

factorial.o: factorial.cpp factorial.hpp
	clang++ $(CFLAGS) -c $^

clean:
	rm *.o *.gch factorial tests
	rm -r *.dSYM
#+end_src
#+begin_src C++ :main no :tangle 04_factorial/main.cpp :mkdirp yes
// We will use the googletest library to
// write test cases to check your code.
// The next line includes this library
#include <gtest/gtest.h>
// in order to use the factorial function
// we need to include the header file with
// its declaration.  Local files are included
// using double quotes instead of the angle brackets.
#include "factorial.hpp"

// The syntax for googletest is pretty easy.
// TEST has two parameters: the first is the
// name of the test "family".  We can group
// tests together that test similar things.
// Here we put all tests into the same family.
// The second is the name of the individual test.
// It should be descriptive of what is being tested.
// Each test needs a unique individual name.

// We include all the tests that will be checked
// when you press "Mark".
TEST(factorialTest, factorialOf0is1) {
  EXPECT_EQ(factorial(0), 1);
}

TEST(factorialTest, factorialOf1is1) {
  EXPECT_EQ(factorial(1), 1);
}

TEST(factorialTest, factorialOf2is2) {
  EXPECT_EQ(factorial(2), 2);
}

TEST(factorialTest, factorialOf3is6) {
  EXPECT_EQ(factorial(3), 6);
}

TEST(factorialTest, factorialOf4is24) {
  EXPECT_EQ(factorial(4), 24);
}

TEST(factorialTest, factorialOf5is120) {
  EXPECT_EQ(factorial(5), 120);
}

TEST(factorialTest, factorialOf6is720) {
  EXPECT_EQ(factorial(6), 720);
}

TEST(factorialTest, factorialOf7is5040) {
  EXPECT_EQ(factorial(7), 5040);
}

// Try to add your own test here!

int main(int argc, char* argv[]) {
    // the next line is necessary to initialise googletest
    ::testing::InitGoogleTest(&argc, argv);

    /***
    you can add things to main if you want
    ***/

    // the next line runs all the tests given above.
    // you can comment this line out if you don't want
    // to do something else and not run the tests
    return RUN_ALL_TESTS();
}
#+end_src
* Pointers and References
Say we want a function that
#+begin_src C++ :main no :tangle 05_passby/passby.cpp :mkdirp yes
#include <iostream>
#include <vector>

void print_vec(std::vector<int> vec) {
    // fill this out
}
#+end_src

#+begin_src C++ :main no :tangle 05_passby/main.cpp :mkdirp yes
#include <vector>
#include "passby.cpp"

int main() {
    std::vector<int> v = {1,2,3,4,5,6,7,8,9,10};
    print_vec(v);
    return 0;
}
#+end_src

Construct the function $n^2$.

#+begin_src C++ :main no :tangle 05_passby/passby.cpp :mkdirp yes
int square(int n) {
    return 0;
}
#+end_src

Construct swap functions, what is the difference?

#+begin_src C++ :main no :tangle 05_passby/passby.cpp :mkdirp yes
void swap(int a, int b) {

}

void swap(int* ptr1, int* ptr2) {

}
#+end_src

* Classes in C++
